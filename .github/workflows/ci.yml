name: ci

on: [push]

jobs:
  test:
    strategy:
      matrix:
        module:
          - analytics
          - autoscaling/ecs
          - aws-transfer
          - aws-transfer/iam-role
          - certificate
          - cloudflare
          - cloudwatch
          - cloudwatch-snowflake
          - cognito
          - ecr
          - ecs
          - ecs-deploy
          - ecs-task
          - elasticache
          - fivetran
          - fivetran/connectors/google_analytics
          - fivetran/connectors/lambda
          - github-backup
          - global-accelerator
          - http-proxy
          - iam/iam-for-deploy-bot
          - iam/iam-for-humans
          - iam/iam-policy-for-cross-account-access/destination-account
          - iam/iam-policy-for-cross-account-access/origin-account
          - iam/iam-policy-for-ecs/core
          - iam/iam-policy-for-ecs/taggable-resources
          - iam/iam-policy-for-s3
          - iam/iam-policy-for-secrets
          - iam/iam-policy-for-taggable-resources
          - iam/iam-xray
          - kms-key
          - kms-key-replica
          - lambda
          - nat
          - rds
          - s3
          - s3-private
          - s3-public
          - script/database-roles
          - secrets
          - slack/chatbot
          - slack/ecs-deployment-failure
          - slack/sentry
          - slack/sns
          - snowflake/cloud
          - stack/app
          - stack/setup
          - vpc
          - vpc-peering
          - vpn
          - xray
        aws-version: ["~> 4.0", "~> 5.0"] # Add this line to include AWS provider versions

      fail-fast: false
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v2

      - name: Set AWS Provider Version
        run: |
          cd ${{ matrix.module }}
          FILE=versions.tf
          if test -f "$FILE"; then
            mv $FILE versions-backup.tf
            echo "$FILE exists."
          fi
          cat > $FILE <<EOF
            terraform {
              required_providers {
                aws = {
                  source  = "hashicorp/aws"
                  version = "${{ matrix.aws-version }}"
                }
              }
              required_version = ">= 1.0"
            }
          EOF

          cat $FILE

      - name: init
        run: |
          cd ${{ matrix.module }}
          terraform init
          FILE=versions-backup.tf
          if test -f "$FILE"; then
            rm versions.tf
            mv versions-backup.tf versions.tf
          fi

      - name: validate
        run: |
          cd ${{ matrix.module }}
          # the stack/app module must have a provider block because the sub-module "vpc-peering" requires a non-standard "provider
          # see: https://github.com/hashicorp/terraform/issues/28490
          if [[ "${{ matrix.module }}" == "stack/app" ]]; then echo "provider \"aws\" { alias = \"peer\" }" >> vpc-peering.tf; fi
          if [[ "${{ matrix.module }}" == "vpc-peering" ]]; then echo "provider \"aws\" { alias = \"peer\" }" >> main.tf; fi
          terraform validate

      - name: fmt -check
        run: |
          cd ${{ matrix.module }}
          terraform fmt -check
